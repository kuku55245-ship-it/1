name: RDP + Tailscale + KVM on Linux (A)

on:
  workflow_dispatch:
    inputs:
      # Removed sensitive inputs: ts_api_key, ts_authkey, ts_tailnet
      quick_test:         { description: "Run 5-minute test", type: boolean, default: false }
      runtime_minutes:    { description: "Runtime (max 360; default 355 when not test)", required: false, default: "355" }
      do_purge:           { description: "Purge bullet* devices at start (single instance only)", required: false, default: "true" }
      cycles:             { description: "0=stop after A; N=handoffs left incl this run", required: false, default: "0" }
      rdp_count:          { description: "How many RDP instances (1-10)", required: false, default: "1" }

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: bash

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
      multi:  ${{ steps.mk.outputs.multi }}
    steps:
      - id: mk
        shell: pwsh
        run: |
          $n = [int]"${{ inputs.rdp_count }}"; if ($n -lt 1) { $n = 1 }; if ($n -gt 10) { $n = 10 }
          $inc = @(); for ($i=1; $i -le $n; $i++){ $inc += @{ id = $i } }
          $json = @{ include = $inc } | ConvertTo-Json -Compress
          "matrix=$json" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8
          $multi = if ($n -gt 1) { '1' } else { '0' }
          "multi=$multi" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8

  rdp:
    needs: setup
    # --- THIS IS THE CHANGE ---
    # Requesting a 4-core VM (Paid feature)
    runs-on: ubuntu-latest-4-cores
    # --- END OF CHANGE ---
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: 10
    timeout-minutes: 370
    env:
      # Use secrets for user and password
      RDP_USER: ${{ secrets.RDP_USER }}
      RDP_PASS: ${{ secrets.RDP_PASS }}
      # Pass secrets needed later as environment variables
      TS_API_KEY_SECRET: ${{ secrets.TS_API_KEY }}
      TS_AUTHKEY_SECRET: ${{ secrets.TS_AUTHKEY }}
      TS_TAILNET_SECRET: ${{ secrets.TS_TAILNET }}

    steps:
      - name: Decide hostname + runtime
        run: |
          if [ "${{ inputs.rdp_count }}" -gt 1 ]; then hn="bullet${{ matrix.id }}"; else hn="bullet"; fi
          echo "TS_HOSTNAME=$hn" | tee -a $GITHUB_ENV
          Yes() { [[ "$1" =~ ^(true|1|yes|on)$ ]]; }
          IntOr() { if [[ "$1" =~ ^[0-9]+$ ]]; then echo "$1"; else echo "$2"; fi; }
          runtime=$(IntOr "${{ inputs.runtime_minutes }}" 355)
          if Yes "${{ inputs.quick_test }}"; then runtime=5; fi
          if ! Yes "${{ inputs.quick_test }}" && [ "$runtime" -lt 6 ]; then runtime=355; fi
          if [ "$runtime" -gt 360 ]; then runtime=355; fi
          echo "RUNTIME_MINUTES=$runtime" | tee -a $GITHUB_ENV
          echo "Hostname: $hn  | Runtime: $runtime"

      - name: Purge bullet* devices (single-instance only)
        if: ${{ needs.setup.outputs.multi == '0' }}
        shell: pwsh
        run: |
          function Yes($v){ "$v" -match '^(?i:true|1|yes|on)$' }
          if (Yes("${{ inputs.do_purge }}")) {
            try {
              # Use secrets from environment variables
              $auth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ env.TS_API_KEY_SECRET }}:"))
              $tn = [uri]::EscapeDataString("${{ env.TS_TAILNET_SECRET }}")
              $list = Invoke-RestMethod -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers @{ Authorization = "Basic $auth" }
              foreach($d in $list.devices){
                if ($d.hostname -match '^bullet[0-9]*$'){
                  Invoke-RestMethod -Method Delete -Uri "https://api.tailscale.com/api/v2/device/$($d.id)" -Headers @{ Authorization = "Basic $auth" } -ErrorAction SilentlyContinue
                }
              }
              Write-Host "Purged bullet* devices (if any)."
            } catch { Write-Host "Purge warning: $($_.Exception.Message)" }
          } else { Write-Host "Purge disabled." }
      
      - name: Install Desktop Environment + RDP Server
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y xfce4 xfce4-goodies xrdp
          sudo systemctl enable xrdp

      - name: Create RDP User if not exists and Set Password
        run: |
          # User and Password come directly from env variables using secrets
          if ! id -u "$RDP_USER" >/dev/null 2>&1; then
              echo "User $RDP_USER does not exist. Creating..."
              sudo useradd -m -s /bin/bash "$RDP_USER"
              sudo adduser "$RDP_USER" sudo # Add to sudo group if needed
          fi
          echo "$RDP_USER:$RDP_PASS" | sudo chpasswd
          sudo adduser "$RDP_USER" ssl-cert
          sudo systemctl restart xrdp

      - name: Install + Up Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          # Use secrets from environment variables
          sudo tailscale up --authkey "${{ env.TS_AUTHKEY_SECRET }}" --hostname "$TS_HOSTNAME" --accept-dns=true --accept-routes=true
          ip4=$(tailscale ip -4 | head -n1)
          echo "TAILSCALE_IP=$ip4" | tee -a $GITHUB_ENV
          echo "Tailscale IPv4: $ip4"
          echo "RDP ready. user=$RDP_USER pass=(from secret) host=$TS_HOSTNAME ip=$TAILSCALE_IP"

      - name: Enable KVM (Nested Virtualization)
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Check for Nested Virtualization (KVM)
        run: |
          sudo apt-get install -y cpu-checker qemu-kvm libvirt-daemon-system
          echo "--- Running kvm-ok ---"; sudo kvm-ok; echo "----------------------"
          sudo adduser $RDP_USER kvm; sudo adduser $RDP_USER libvirt
          echo "KVM check complete."

      - name: Keep alive (to ${{ env.RUNTIME_MINUTES }} mins)
        run: |
          end=$(( $(date +%s) + ${{ env.RUNTIME_MINUTES }} * 60 ))
          while [ $(date +%s) -lt $end ]; do
            echo "[RDP] Heartbeat $(date +%H:%M:%S) ends at $(date -d @$end +%H:%M:%S)"
            sleep 60
          done

      - name: Dispatch next or stop
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cycles=${{ inputs.cycles }}
          if [ "$cycles" -gt 0 ]; then
            next=$((cycles - 1))
            if [ "$next" -le 0 ]; then
              url="https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-tailscale-stop.yml/dispatches"
              # Need secrets for the stop job (read directly by stop workflow)
              payload=$(cat <<EOF
              {
                "base_prefix": "bullet", 
                "max_count": "10", 
                "dry_run": "false"
              }
              EOF
              )
              body="{\"ref\":\"${{ github.ref_name }}\", \"inputs\":$payload}"              
              curl -sS -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "$url" -d "$body"
              echo "Dispatched STOP."
            else
              url2="https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-workflow-B.yml/dispatches"
              # Non-secret inputs for the next job
              payload2=$(cat <<EOF
              {
                "quick_test": "${{ inputs.quick_test }}",
                "runtime_minutes": "${{ inputs.runtime_minutes }}",
                "do_purge": "${{ inputs.do_purge }}",
                "cycles": "$next",
                "rdp_count": "${{ inputs.rdp_count }}"
              }
              EOF
              )
              body2="{\"ref\":\"${{ github.ref_name }}\", \"inputs\":$payload2}"              
              curl -sS -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "$url2" -d "$body2"
              echo "Dispatched Workflow B with cycles=$next"
            }
          else
            echo "No cycles configured. Done."
          fi

